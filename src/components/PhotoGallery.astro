---
import { getCollection } from "astro:content";


const posts = (await getCollection("photo-gallery")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);


const on_campus_ruth_ann = Array.from({length: 42}, (_, i) => ({
  id: `on_campus_ruth_ann${i + 1}`,
  slug: `on_campus_ruth_ann${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/on_campus_ruth_ann${i + 1}.JPG`,
    credit: 'Ruth Ann',
    type: 'Studio Sessions (On Campus)' // Change this to the appropriate event type
  }
}));

const on_campus_eli_meadow = Array.from({length: 13}, (_, i) => ({
  id: `on_campus_eli_meadow${i + 1}`,
  slug: `on_campus_eli_meadow${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/on_campus_eli_meadow${i + 1}.jpg`,
    credit: 'Eli Meadow',
    type: 'Studio Sessions (On Campus)' // Change this to the appropriate event type
  }
}));

const off_campus_eli_meadow = Array.from({length: 31}, (_, i) => ({
  id: `off_campus_eli_meadow${i + 1}`,
  slug: `off_campus_eli_meadow${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/off_campus_eli_meadow${i + 1}.jpg`,
    credit: 'Eli Meadow',
    type: 'Studio Sessions (Off Campus)' // Change this to the appropriate event type
  }
}));

const off_campus_sahel = Array.from({length: 12}, (_, i) => ({
  id: `off_campus_sahel${i + 1}`,
  slug: `off_campus_sahel${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/off_campus_sahel${i + 1}.JPG`,
    credit: 'Sahel @saiguy95',
    type: 'Studio Sessions (Off Campus)' // Change this to the appropriate event type
  }
}));

const off_campus_mac = Array.from({length: 8}, (_, i) => ({
  id: `off_campus_mac${i + 1}`,
  slug: `off_campus_mac${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/off_campus_mac${i + 1}.png`,
    credit: 'Mac @m4c.c4m',
    type: 'Studio Sessions (Off Campus)' // Change this to the appropriate event type
  }
}));

const member_socials_sahel = Array.from({length: 5}, (_, i) => ({
  id: `member_socials_sahel${i + 1}`,
  slug: `member_socials_sahel${i + 1}`,
  body: '',
  collection: 'photo-gallery',
  data: {
    imgSrc: `/assets/member_socials_sahel${i + 1}.JPG`,
    credit: 'Sahel @saiguy95',
    type: 'General Member Socials' // Change this to the appropriate event type
  }
}));

interface Post {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: {
    imgSrc: string;
    credit: string;
    type: string;
  };
}

const allPosts: Post[] = [...posts, ...on_campus_ruth_ann, ...on_campus_eli_meadow, ...off_campus_eli_meadow, ...off_campus_sahel, ...off_campus_mac, ...member_socials_sahel];

const eventTypes = [
  "Open Mics",
  "Studio Sessions (On Campus)",
  "Studio Sessions (Off Campus)",
  "General Member Socials"
];
const groupedPosts = eventTypes.map((eventType) => ({
  eventType,
  posts: allPosts.filter((post) => post.data.type === eventType),
}));
---

<!doctype html>
<html lang="en">
  <head>
    <style>
      main {
        width: 100%;
        transition: all 0.5s ease-in-out;
      }
      .hide {
        height: 4.2rem;
        transition: all 0.5s ease-in-out;

        @media (max-width: 640px) {
          height: 3.5rem;
        }
      }
      section {
        transition: all 0.3s ease-in-out;
      }
      *::-webkit-scrollbar {
				width: 12px;
				height: 30px;
			}

			*::-webkit-scrollbar-track {
				background: rgb(0, 0, 0);
				border-left: 1px solid white;
			}

			*::-webkit-scrollbar-thumb {
				background-color: rgb(255, 255, 255);
				border-left: 1px solid rgb(255, 255, 255);
			}
      /* This applies to the scrollbar track */
      ul::-webkit-scrollbar {
        width: 30px;
        height: 30px;
      }

      ul::-webkit-scrollbar-track {
        background: rgb(0, 0, 0);
        border-top: 1px solid white;
        border-bottom: 1px solid white;
        border-left: none;
      }

      ul::-webkit-scrollbar-thumb {
        background-color: rgb(255, 255, 255);
        border: 1px solid rgb(255, 255, 255);
      }

      img {
        max-width: 100%;
        height: 500px;
      }

      .dropdownSVG {
        transform: rotate(90deg);
        transition: all 0.3s ease-in-out;
        margin-right: 0.5rem;
      }

      .dropdownSVG.down {
        transform: rotate(180deg);
      }

      @media (max-width: 600px) {
        img {
          height: 300px;
        }
      }
    </style>
  </head>
  <body class="bg-black">
    <h1 class="border-b pl-4 pt-4 border-opacity-50 border-white pb-3 mb-0">Gallery</h1>
    <main class="flex flex-col">
      {
        groupedPosts.length > 0 ? (
          groupedPosts.map(({ eventType, posts }) => (
          <section class="overflow-x-none overflow-y-none border-b border-white border-opacity-50 bg-black hide sm:h-[42rem] h-[30rem]">
            <h3 class="ml-5 sm:ml-10 pt-[0.85rem] text-2xl sm:text-4xl flex flex-row" onclick="toggleHidden(event)">
              <svg id="svg" fill="#ffffff" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" class="dropdownSVG" width="20"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>triangle</title> <path d="M31.082 27.5l-13.999-24.249c-0.237-0.352-0.633-0.58-1.083-0.58s-0.846 0.228-1.080 0.575l-0.003 0.005-14 24.249c-0.105 0.179-0.167 0.395-0.167 0.625 0 0.69 0.56 1.25 1.25 1.25 0 0 0 0 0 0h28c0.69-0 1.249-0.56 1.249-1.25 0-0.23-0.062-0.446-0.171-0.631l0.003 0.006zM4.165 26.875l11.835-20.499 11.834 20.499z"></path> </g></svg>

              {eventType}
            </h3>
            <ul class="pt-4 flex flex-row overflow-x-scroll overflow-y-hidden whitespace-nowrap pl-5">
              {posts.map((post) => (
                <li class="flex-shrink-0 min-width-[content-size] mr-5 flex flex-col">
                    <img src={post.data.imgSrc} alt={post.data.credit} />
                    <p class=" text-center">Photo Credit: {post.data.credit}</p>
                </li>
              ))}
            </ul>
            <script>
              // @ts-ignore
              function toggleHidden(event) {
                let parentSection = event.target;
                let svg = parentSection.querySelector("#svg");

                while (parentSection && parentSection.nodeName !== 'SECTION') {
                  parentSection = parentSection.parentNode;
                }
                if (parentSection) {
                  parentSection.classList.toggle("hide");
                  svg?.classList.toggle('down');
                }
              }
            </script>
          </section>
          ))
        ) : (
          <p>No posts available.</p>
        )
      }
    </main>
    <section class="h-[40rem] bg-black"></section>
  </body>
</html>